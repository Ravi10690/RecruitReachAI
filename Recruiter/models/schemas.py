"""
Data schemas for RecruitReach2.

This module defines the Pydantic models used throughout the application
for data validation and serialization.
"""

from typing import Optional
from pydantic import BaseModel, Field, EmailStr


class JobDetails(BaseModel):
    """Schema for job details extracted from job descriptions."""
    
    company_name: str = Field(
        default="",
        description="Name of the company offering the job"
    )
    recruiter_email: str = Field(
        default="",
        description="Email address of the recruiter or hiring manager"
    )
    job_position: str = Field(
        default="",
        description="Title or position of the job being offered"
    )


class EmailContent(BaseModel):
    """Schema for email content generated by the application."""
    
    subject: str = Field(
        ...,
        description="Subject line of the email"
    )
    body_text: str = Field(
        ...,
        description="Plain text version of the email body"
    )
    body_html: str = Field(
        ...,
        description="HTML formatted version of the email body"
    )


class CoverLetterContent(BaseModel):
    """Schema for cover letter content generated by the application."""
    
    content_text: str = Field(
        ...,
        description="Plain text content of the cover letter"
    )
    content_html: str = Field(
        ...,
        description="HTML formatted content of the cover letter with CSS styling"
    )


class EmailConfig(BaseModel):
    """Configuration for email sending functionality."""
    
    sender_email: str = Field(
        ...,
        description="Email address of the sender"
    )
    sender_name: str = Field(
        ...,
        description="Name of the sender"
    )
    smtp_server: str = Field(
        default="smtp.gmail.com",
        description="SMTP server address"
    )
    smtp_port: int = Field(
        default=587,
        description="SMTP server port"
    )
    app_password: str = Field(
        ...,
        description="Application password for email authentication"
    )


class APIConfig(BaseModel):
    """Configuration for API services."""
    
    openai_api_key: str = Field(
        ...,
        description="API key for OpenAI services"
    )


class AppConfig(BaseModel):
    """Main application configuration."""
    
    email: Optional[EmailConfig] = None
    api: Optional[APIConfig] = None
